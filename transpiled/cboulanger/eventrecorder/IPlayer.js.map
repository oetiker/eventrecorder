{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/IPlayer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "members",
    "start",
    "stop",
    "replay",
    "script",
    "translate",
    "getExportFileExtension",
    "cmd_assert_uri",
    "uri",
    "cmd_assert_match_uri",
    "uri_regexp",
    "cmd_config_set_mode",
    "mode",
    "cmd_await_all",
    "cmd_define",
    "macro_name",
    "cmd_end",
    "cmd_info",
    "text",
    "cmd_hide_info",
    "cmd_widget_info",
    "id",
    "cmd_await_property_value",
    "property",
    "value",
    "cmd_await_property_match_json",
    "json",
    "cmd_delay",
    "delayInMs",
    "cmd_wait",
    "timeInMs",
    "cmd_await_event",
    "type",
    "cmd_await_event_data",
    "data",
    "cmd_await_event_match_json",
    "cmd_assert_appeared",
    "cmd_assert_disappeared",
    "cmd_execute",
    "cmd_set_value",
    "cmd_await_value",
    "cmd_open_tree_node",
    "nodeIndex",
    "cmd_close_tree_node",
    "cmd_open_tree_node_treevirtual",
    "cmd_close_tree_node_treevirtual",
    "cmd_set_selection",
    "selectedId",
    "cmd_await_selection",
    "cmd_set_model_selection",
    "indexArray",
    "cmd_set_selection_from_selectables",
    "index",
    "cmd_await_selection_from_selectables",
    "cmd_reset_selection",
    "cmd_set_table_selection",
    "interval",
    "cmd_set_row_selection",
    "rowIndex",
    "cboulanger",
    "eventrecorder",
    "IPlayer"
  ],
  "mappings": "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",
  "file": "IPlayer.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2019 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors:\n    Christian Boulanger (cboulanger) info@bibliograph.org\n\n************************************************************************ */\n\n/**\n * This interface defines the events and methods a player must implement\n */\nqx.Interface.define(\"cboulanger.eventrecorder.IPlayer\", {\n\n  /**\n   * Events that must be declared by this interface\n   */\n  events: {\n    /**\n     * Fired with each step of the replayed script. The event data is an array\n     * containing the number of the step and the number of steps\n     */\n    \"progress\" : \"qx.event.type.Data\"\n  },\n\n  /**\n   * Methonds that must be declared by this interface\n   */\n  members :\n  {\n\n    /**\n     * Starts the player\n     */\n    start() {},\n\n    /**\n     * Stops the recording.\n     */\n    stop() {},\n\n    /**\n     * Replays the given script of intermediate code\n     * @param script {String} The script to replay\n     * @return {Promise} Promise which resolves when the script has been replayed, or\n     * rejecdts with an error\n     */\n    async replay(script) {},\n\n    /**\n     * Translates the intermediate code into the target language\n     * @param script\n     * @return {string} Javasc\n     */\n    translate(script) {},\n\n    /**\n     * Returns the file extension of the downloaded file in the target language\n     * @return {string}\n     */\n    getExportFileExtension() {},\n\n\n    /*\n    ============================================================================\n       COMMANDS\n    ============================================================================\n    */\n\n    /**\n     * Asserts that the current url matches the given value (RegExp)\n     * @param uri {String}\n     */\n    cmd_assert_uri(uri) {},\n\n    /**\n     * Asserts that the current url matches the given value (RegExp)\n     * @param uri_regexp {String} A string containing a regular expression\n     */\n    cmd_assert_match_uri(uri_regexp) {},\n\n    /**\n     * Sets the player mode\n     * @param mode\n     * @return {string}\n     */\n    cmd_config_set_mode(mode) {},\n\n    /**\n     * Starts a block of statements that return promises. The player will wait for\n     * all of the promises to resolve before proceeding.\n     */\n    cmd_await_all() {},\n\n    /**\n     * Starts the definition of a macro\n     * @param macro_name\n     * @return {null}\n     */\n    cmd_define(macro_name) {},\n\n    /**\n     * Ends the definition of a macro or a block of awaitable statements\n     * @return {null}\n     */\n    cmd_end() {},\n\n    /**\n     * Generates code that displays an informational text centered on the screen\n     * @param text {String} The text to display\n     * @return {String}\n     */\n    cmd_info(text) {},\n\n    /**\n     * Generates code that hides the info pane\n     * @return {String}\n     */\n    cmd_hide_info(text) {},\n\n    /**\n     * Generates code that displays an informational text placed next to the widget with the given id.\n     * @param id {String} The id of the widget\n     * @param text {String} The text to display\n     * @return {String}\n     */\n    cmd_widget_info(id, text) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the given\n     * property of the object with the given id is assigned the given value.\n     * This works also with properties without a change event because the\n     * value is periodically checked.\n     * @param id {String} The id of the object\n     * @param property {String} The name of the property\n     * @param value {*} The value, must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_property_value(id, property, value) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the following\n     * condition is met: the property with the given name of the object with the\n     * given id changes to a value that, if serialized to json, matches the given\n     * json literal. The json can contain regular expressions enclosed in\n     * <! and !> as placeholders (and validators) for unknown values\n     * (See {@link cboulanger.eventrecorder.player.Abstract#createRegexpForJsonComparison}\n     *\n     * @param id {String} The id of the object\n     * @param property {String} The name of the property\n     * @param json {String} A json expression\n     * @return {*|string}\n     */\n    cmd_await_property_match_json(id, property, json) {},\n\n    /**\n     * Generates code that causes the given delay (in milliseconds).\n     * The delay is capped by the {@link cboulanger.eventrecorder.player.Abstract#maxDelay} property\n     * and will only be caused in presentation mode\n     * @param delayInMs {Number}\n     * @return {string}\n     */\n    cmd_delay(delayInMs) {},\n\n    /**\n     * Generates code that waits the given time in milliseconds, regardless of player mode\n     * @param timeInMs {Number}\n     * @return {string}\n     */\n    cmd_wait(timeInMs) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @return {*|string}\n     */\n    cmd_await_event(id, type) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @param data {*} The data to expect. Must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_event_data(id, type, data) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name with event data that\n     * matches, if serialized to JSON, the given json string, which can contain\n     * regular expressions embedded in <! and !>\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @param json {*} A JSON expression that can contain regular expressions\n     * embedded in <! and !>\n     * @return {*|string}\n     */\n    cmd_await_event_match_json(id, type, json) {},\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id becomes visible and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_appeared(id) {},\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id disappears and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_disappeared(id) {},\n\n    /**\n     * Generates code that fires an `execute` event on the object with the given id (Button, Command)\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_execute(id) {},\n\n    /**\n     * Generates code that sets the `value` property of the object with the given id\n     * @param id {String}\n     * @param data {String} A JSON expression\n     * @return {string}\n     */\n    cmd_set_value(id, data) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the value\n     * property of the object with the given id is assigned the given value.\n     * The value must be given in JSON format, i.e. strings must be quoted.\n     * @param id {String} The id of the object\n     * @param value {String} The value, must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_value(id, value) {},\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} The id of the {@link qx.ui.tree.VirtualTree}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node(id, nodeIndex) {},\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node(id, nodeIndex) {},\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node_treevirtual(id, nodeIndex) {},\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node_treevirtual(id, nodeIndex) {},\n\n    /**\n     * Generates code that sets a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected.\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that is selected. Only one widget can be selected at this time\n     * @return {String}\n     */\n    cmd_set_selection(id, selectedId) {},\n\n    /**\n     * Generates code that awaits a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected within the timeout\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that should be selected\n     * @return {String}\n     */\n    cmd_await_selection(id, selectedId) {},\n\n\n    /**\n     * Generates code that sets a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {String} An array literal containing the indexes of the models\n     * @return {String}\n     */\n    cmd_set_model_selection(id, indexArray) {},\n\n    /**\n     * Generates code that sets a selection on widgets that have a `getSelectables()` method\n     * @param id {String} The id of the widget on which the selection is set\n     * @param index {String|Number} The index of the selection in the selectables\n     * @return {String}\n     */\n    cmd_set_selection_from_selectables(id, index) {},\n\n    /**\n     * Generates code that awaits a selection on widgets that have a `getSelectables()` method\n     * @param id {String} The id of the widget on which the selection is set\n     * @param index {String|Number} The index of the selection in the selectables\n     * @return {String}\n     */\n    cmd_await_selection_from_selectables(id, index) {},\n\n    /**\n     * Resets the selection of a widget that has a `selection` property or a `resetSelection` method.\n     * @param id {String} The id of the widget\n     * @return {string}\n     */\n    cmd_reset_selection(id) {},\n\n    /**\n     * Generates code that sets an selection interval on a {@link qx.ui.table.Table}\n     * @param id {String} The id of a {@link qx.ui.table.Table}\n     * @param interval {String} The first and the last row to be selected, separated by comma.\n     * @return {String}\n     */\n    cmd_set_table_selection(id, interval) {},\n\n    /**\n     * Generates code that set the selection on a {@link qx.ui.virtual.selection.Row} object\n     * @param id {String} The id of a qx.ui.virtual.selection.Row object\n     * @param rowIndex {String|Number} The index of the row to be selected\n     * @return {String}\n     */\n    cmd_set_row_selection(id, rowIndex) {}\n  }\n});\n"
  ]
}