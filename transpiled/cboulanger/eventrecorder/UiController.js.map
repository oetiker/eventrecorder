{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/UiController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "window",
    "Window",
    "statics",
    "CONFIG_KEY",
    "SCRIPT",
    "PLAYER_TYPE",
    "PLAYER_MODE",
    "GIST_ID",
    "AUTOPLAY",
    "SHOW_PROGRESS",
    "FILE_INPUT_ID",
    "aliases",
    "properties",
    "mode",
    "check",
    "event",
    "init",
    "apply",
    "recorder",
    "nullable",
    "player",
    "script",
    "autoplay",
    "construct",
    "caption",
    "aliasMgr",
    "util",
    "AliasManager",
    "getInstance",
    "getAliases",
    "Object",
    "entries",
    "cboulanger",
    "eventrecorder",
    "UiController",
    "alias",
    "base",
    "add",
    "set",
    "modal",
    "showMinimize",
    "showMaximize",
    "height",
    "layout",
    "HBox",
    "allowGrowX",
    "allowGrowY",
    "__players",
    "uri_info",
    "Uri",
    "parseUri",
    "location",
    "href",
    "Recorder",
    "setRecorder",
    "objectId",
    "replace",
    "toLocaleLowerCase",
    "setQxObjectId",
    "core",
    "Id",
    "register",
    "scriptable",
    "queryKey",
    "eventrecorder_scriptable",
    "Environment",
    "get",
    "excludeIds",
    "bind",
    "converter",
    "v",
    "recordButton",
    "form",
    "ToggleButton",
    "setIcon",
    "addListener",
    "_toggleRecord",
    "stopButton",
    "Button",
    "enabled",
    "icon",
    "toolTipText",
    "stopButtonState",
    "setEnabled",
    "isRunning",
    "Boolean",
    "getPlayer",
    "stop",
    "replayButton",
    "_startReplay",
    "getCanReplayInBrowser",
    "editButton",
    "edit",
    "saveButton",
    "save",
    "loadMenu",
    "menu",
    "Menu",
    "loadUserGistButton",
    "loadUserGist",
    "loadGistByIdButton",
    "loadGistById",
    "loadButton",
    "SplitButton",
    "addOwnedQxObject",
    "load",
    "e",
    "getData",
    "document",
    "createElement",
    "setAttribute",
    "body",
    "appendChild",
    "input",
    "env",
    "storage",
    "bom",
    "Web",
    "getSession",
    "playerType",
    "eventrecorder_type",
    "eventrecorder_player_mode",
    "getItem",
    "getPlayerByType",
    "setMode",
    "setItem",
    "setPlayer",
    "eventrecorder_autoplay",
    "gist_id",
    "eventrecorder_gist_id",
    "_getRawGist",
    "then",
    "gistplayer",
    "Qooxdoo",
    "replay",
    "gist",
    "setScript",
    "setAutoplay",
    "catch",
    "Error",
    "message",
    "members",
    "__editorWindow",
    "_applyMode",
    "value",
    "old",
    "_applyScript",
    "getRecorder",
    "_applyAutoplay",
    "record",
    "getScript",
    "reload",
    "_upload",
    "Promise",
    "resolve",
    "reject",
    "getElementById",
    "addEventListener",
    "file",
    "target",
    "files",
    "name",
    "endsWith",
    "reader",
    "FileReader",
    "result",
    "readAsText",
    "click",
    "_download",
    "filename",
    "text",
    "element",
    "encodeURIComponent",
    "style",
    "display",
    "removeChild",
    "url",
    "req",
    "io",
    "request",
    "Jsonp",
    "response",
    "getResponse",
    "lang",
    "Type",
    "isObject",
    "data",
    "JSON",
    "stringify",
    "filenames",
    "getOwnPropertyNames",
    "content",
    "send",
    "_getApplicationName",
    "pathname",
    "split",
    "slice",
    "join",
    "__setupEditor",
    "win",
    "qookery",
    "contexts",
    "Qookery",
    "loadResource",
    "ResourceManager",
    "toUri",
    "xmlDocument",
    "xml",
    "Document",
    "fromString",
    "xmlSource",
    "parser",
    "createFormParser",
    "formComponent",
    "parseXmlDocument",
    "editorWidget",
    "getMainWidget",
    "getModel",
    "setLeftEditorContent",
    "formModel",
    "translateTo",
    "getTargetScriptType",
    "getTargetMode",
    "Timer",
    "once",
    "__setupAutocomplete",
    "dispose",
    "langTools",
    "ace",
    "require",
    "tokens",
    "iface",
    "Interface",
    "getByName",
    "$$members",
    "key",
    "startsWith",
    "code",
    "toString",
    "params",
    "indexOf",
    "map",
    "p",
    "trim",
    "substr",
    "snippet",
    "i",
    "meta",
    "push",
    "type",
    "ids",
    "traverseObjectTree",
    "obj",
    "getQxObjectId",
    "id",
    "getAbsoluteIdOf",
    "getOwnedQxObjects",
    "owned",
    "registeredObjects",
    "values",
    "__registeredObjects",
    "completer",
    "getCompletions",
    "editor",
    "session",
    "pos",
    "prefix",
    "callback",
    "length",
    "line",
    "getLine",
    "row",
    "column",
    "numberOfTokens",
    "_tokenize",
    "options",
    "filter",
    "token",
    "score",
    "addCompleter",
    "clazz",
    "String",
    "firstUp",
    "dialog",
    "Dialog",
    "select",
    "label",
    "promise",
    "getQxObject",
    "setValue",
    "start",
    "infoPane",
    "InfoPane",
    "useIcon",
    "step",
    "steps",
    "error",
    "hide",
    "open",
    "VBox",
    "width",
    "center",
    "exporter",
    "model",
    "editedScript",
    "getLeftEditorContent",
    "translatedText",
    "translate",
    "setRightEditorContent",
    "exportTo",
    "translatedScript",
    "getRightEditorContent",
    "getExportFileExtension",
    "formData",
    "username",
    "show_all",
    "answer",
    "gist_data",
    "suffix",
    "entry",
    "description",
    "some",
    "prompt",
    "defer",
    "setOption",
    "OPTION_EXTERNAL_LIBRARIES",
    "Lifecycle",
    "onReady",
    "dispayedText",
    "getDisplayedText",
    "isDefined",
    "objIdGen",
    "addListenerOnce",
    "controller",
    "Init",
    "getApplication",
    "getRoot",
    "top",
    "right",
    "show"
  ],
  "mappings": "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",
  "file": "UiController.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * The UI Controller for the recorder\n * @asset(cboulanger/eventrecorder/*)\n * @require(cboulanger.eventrecorder.player.Testcafe)\n * @ignore(ace)\n */\nqx.Class.define(\"cboulanger.eventrecorder.UiController\", {\n  extend: qx.ui.window.Window,\n  statics: {\n    CONFIG_KEY : {\n      SCRIPT:       \"eventrecorder.script\",\n      PLAYER_TYPE:  \"eventrecorder.player_type\",\n      PLAYER_MODE:  \"eventrecorder.player_mode\",\n      GIST_ID:      \"eventrecorder.gist_id\",\n      AUTOPLAY:     \"eventrecorder.autoplay\",\n      SHOW_PROGRESS:\"eventrecorder.show_progress\"\n    },\n    FILE_INPUT_ID : \"eventrecorder-fileupload\",\n    aliases: {\n      \"eventrecorder.icon.record\":  \"cboulanger/eventrecorder/media-record.png\",\n      \"eventrecorder.icon.start\":   \"cboulanger/eventrecorder/media-playback-start.png\",\n      \"eventrecorder.icon.pause\":   \"cboulanger/eventrecorder/media-playback-pause.png\",\n      \"eventrecorder.icon.stop\":    \"cboulanger/eventrecorder/media-playback-stop.png\",\n      \"eventrecorder.icon.edit\":    \"cboulanger/eventrecorder/document-properties.png\",\n      \"eventrecorder.icon.save\":    \"cboulanger/eventrecorder/document-save.png\",\n      \"eventrecorder.icon.load\":    \"cboulanger/eventrecorder/document-open.png\",\n      \"eventrecorder.icon.export\":  \"cboulanger/eventrecorder/emblem-symbolic-link.png\"\n    }\n  },\n\n  properties: {\n    /**\n     * Current mode\n     */\n    mode: {\n      check: [\"player\", \"recorder\"],\n      event: \"changeMode\",\n      init: \"recorder\",\n      apply: \"_applyMode\"\n    },\n\n    /**\n     * The recorder instance\n     */\n    recorder: {\n      check: \"cboulanger.eventrecorder.Recorder\",\n      event: \"changeRecorder\",\n      nullable: true\n    },\n\n    /**\n     * The player instance\n     */\n    player: {\n      check: \"cboulanger.eventrecorder.IPlayer\",\n      event: \"changePlayer\",\n      nullable: true\n    },\n\n    /**\n     * The recorded script\n     */\n    script: {\n      check: \"String\",\n      nullable: true,\n      init: \"\",\n      event: \"changeScript\",\n      apply: \"_applyScript\"\n    },\n\n    /**\n     * Whether the stored script should start playing after the\n     * application loads\n     */\n    autoplay: {\n      check: \"Boolean\",\n      nullable: false,\n      init: false,\n      event: \"changeAutoplay\",\n      apply: \"_applyAutoplay\"\n    }\n  },\n\n  /**\n   * Constructor\n   * @param caption {String} The caption of the window. Will be used to create\n   * an object id.\n   * TODO: use child controls, then we don't need to assign object ids to the buttons!\n   */\n  construct: function(caption=\"Event Recorder\") {\n    this.base(arguments);\n\n    // workaround until icon theme can be mixed into application theme\n    const aliasMgr = qx.util.AliasManager.getInstance();\n    const aliases = aliasMgr.getAliases();\n    for (let [alias, base] of Object.entries(cboulanger.eventrecorder.UiController.aliases)) {\n      if (!aliases[alias]) {\n        aliasMgr.add(alias, base);\n      }\n    }\n\n    this.set({\n      caption,\n      modal: false,\n      showMinimize: false,\n      showMaximize: false,\n      height: 90,\n      layout: new qx.ui.layout.HBox(5),\n      allowGrowX: false,\n      allowGrowY: false\n    });\n\n    this.__players = {};\n\n    const uri_info = qx.util.Uri.parseUri(window.location.href);\n    const recorder = new cboulanger.eventrecorder.Recorder();\n    this.setRecorder(recorder);\n\n    // assign id to this widget from caption\n    const objectId = caption.replace(/ /g, \"\").toLocaleLowerCase();\n    this.setQxObjectId(objectId);\n    qx.core.Id.getInstance().register(this, objectId);\n\n    // do not record events for this widget unless explicitly requested\n    let scriptable = uri_info.queryKey.eventrecorder_scriptable || qx.core.Environment.get(\"eventrecorder.scriptable\");\n    if (!scriptable) {\n      recorder.excludeIds(objectId);\n    }\n\n    // caption\n    this.bind(\"recorder.running\", this, \"caption\", {\n      converter: v => v ? \"Recording ...\" : caption\n    });\n    this.bind(\"player.running\", this, \"caption\", {\n      converter: v => v ? \"Replaying ...\" : caption\n    });\n\n    // record button\n    let recordButton = new qx.ui.form.ToggleButton();\n    recordButton.setIcon(\"eventrecorder.icon.record\");\n    recordButton.addListener(\"changeValue\", this._toggleRecord, this);\n    recorder.bind(\"running\", recordButton, \"value\");\n    recorder.bind(\"running\", recordButton, \"enabled\", {\n      converter: v => !v\n    });\n    this.bind(\"mode\", recordButton, \"enabled\", {\n      converter: v => v === \"recorder\"\n    });\n\n    // stop button\n    let stopButton = new qx.ui.form.Button();\n    stopButton.set({\n      enabled: false,\n      icon: \"eventrecorder.icon.stop\",\n      toolTipText: \"Stop recording\"\n    });\n    const stopButtonState = () => {\n      stopButton.setEnabled(\n        recorder.isRunning() || (Boolean(this.getPlayer()) && this.getPlayer().isRunning())\n      );\n    };\n    recorder.addListener(\"changeRunning\", stopButtonState);\n    stopButton.addListener(\"execute\", this.stop, this);\n\n    // replay\n    let replayButton = new qx.ui.form.ToggleButton();\n    replayButton.addListener(\"changeValue\", this._startReplay, this);\n    replayButton.set({\n      enabled: false,\n      icon:\"eventrecorder.icon.start\",\n      toolTipText: \"Replay script\"\n    });\n    // show replay button only if player is attached and if it can replay a script in the browser\n    this.bind(\"player\", replayButton, \"visibility\", {\n      converter: player => Boolean(player) && player.getCanReplayInBrowser() ? \"visible\" : \"excluded\"\n    });\n    this.bind(\"recorder.running\", replayButton, \"enabled\", {\n      converter: v => !v\n    });\n\n\n    // edit button\n    let editButton = new qx.ui.form.Button();\n    editButton.set({\n      enabled: true,\n      icon:\"eventrecorder.icon.edit\",\n      toolTipText: \"Edit script\"\n    });\n    editButton.addListener(\"execute\", this.edit, this);\n    this.bind(\"recorder.running\", editButton, \"enabled\", {\n      converter: v => !v\n    });\n\n    // this.bind(\"script\", editButton, \"enabled\", {\n    //   converter: v => Boolean(v)\n    // });\n\n    // save button\n    let saveButton = new qx.ui.form.Button();\n    saveButton.set({\n      enabled: false,\n      icon:\"eventrecorder.icon.save\",\n      toolTipText: \"Save script\"\n    });\n    saveButton.addListener(\"execute\", this.save, this);\n    this.bind(\"recorder.running\", saveButton, \"enabled\", {\n      converter: v => !v\n    });\n\n    // load split button\n    let loadMenu = new qx.ui.menu.Menu();\n\n    let loadUserGistButton = new qx.ui.menu.Button(\"Load user gist\");\n    loadUserGistButton.addListener(\"execute\", this.loadUserGist, this);\n    loadUserGistButton.setQxObjectId(\"fromUserGist\");\n    loadMenu.add(loadUserGistButton);\n\n    let loadGistByIdButton = new qx.ui.menu.Button(\"Load gist by id\");\n    loadGistByIdButton.addListener(\"execute\", this.loadGistById, this);\n    loadGistByIdButton.setQxObjectId(\"fromGistById\");\n    loadMenu.add(loadGistByIdButton);\n\n    let loadButton = new qx.ui.form.SplitButton();\n    loadButton.set({\n      enabled: false,\n      icon:\"eventrecorder.icon.load\",\n      toolTipText: \"Load script\",\n      menu: loadMenu\n    });\n    loadButton.addOwnedQxObject(loadUserGistButton);\n    loadButton.addOwnedQxObject(loadGistByIdButton);\n    loadButton.addListener(\"execute\", this.load, this);\n    // enable load button only if player can replay scripts in the browser\n    this.bind(\"recorder.running\", loadButton, \"enabled\", {\n      converter: v => !v\n    });\n    // add button to parent\n    this.add(loadButton);\n    this.addOwnedQxObject(loadButton, \"load\");\n    this.add(replayButton);\n    this.addOwnedQxObject(replayButton, \"replay\");\n    this.add(recordButton);\n    this.addOwnedQxObject(recordButton, \"record\");\n    this.add(stopButton);\n    this.addOwnedQxObject(stopButton, \"stop\");\n    this.add(editButton);\n    this.addOwnedQxObject(editButton, \"edit\");\n    this.add(saveButton);\n    this.addOwnedQxObject(saveButton, \"save\");\n\n    // add events for new players\n    this.addListener(\"changePlayer\", e => {\n      if (e.getData()) {\n        this.getPlayer().addListener(\"changeRunning\", stopButtonState);\n      }\n    });\n\n    // form for file uploads\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"visibility\", \"hidden\");\n    document.body.appendChild(form);\n    let input = document.createElement(\"input\");\n    input.setAttribute(\"id\", cboulanger.eventrecorder.UiController.FILE_INPUT_ID);\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"name\", \"file\");\n    input.setAttribute(\"visibility\", \"hidden\");\n    form.appendChild(input);\n\n    const env = qx.core.Environment;\n    const storage = qx.bom.storage.Web.getSession();\n\n    // player configuration\n    let playerType = uri_info.queryKey.eventrecorder_type ||\n      env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_TYPE) ||\n      \"qooxdoo\";\n    let mode = uri_info.queryKey.eventrecorder_player_mode ||\n      storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE) ||\n      env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE) ||\n      \"presentation\";\n    let player = this.getPlayerByType(playerType);\n    player.setMode(mode);\n    player.addListener(\"changeMode\", e => {\n      storage.setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE, e.getData());\n    });\n    this.setPlayer(player);\n\n    // autoplay\n    let autoplay = uri_info.queryKey.eventrecorder_autoplay ||\n      storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY) || false;\n\n    // play script from gist, unless autoplay is enabled (this means the script has been altered)\n    let gist_id = uri_info.queryKey.eventrecorder_gist_id ||\n      env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.GIST_ID);\n    if (gist_id && !autoplay) {\n      autoplay = env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY);\n      this._getRawGist(gist_id)\n        .then(gist => {\n          // if the eventrecorder itself is scriptable, run the gist in a separate player without GUI\n          if (autoplay && scriptable) {\n            let gistplayer = new cboulanger.eventrecorder.player.Qooxdoo();\n            gistplayer.setMode(mode);\n            gistplayer.replay(gist);\n          } else {\n            this.setScript(gist);\n            if (autoplay) {\n              this.replay();\n              this.setAutoplay(false);\n            }\n          }\n        })\n        .catch(e => {\n          throw new Error(`Gist ${gist_id} cannot be loaded: ${e.message}.`);\n        });\n    } else {\n      let script = storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT);\n      if (script) {\n        this.setScript(script);\n        if (autoplay) {\n          this.replay();\n          this.setAutoplay(false);\n        }\n      }\n    }\n  },\n\n  /**\n   * The methods and simple properties of this class\n   */\n  members:\n  {\n    /**\n     * @var {qx.ui.window.Window}\n     */\n    __editorWindow : null,\n    __players : null,\n\n    _applyMode(value, old) {\n      if (value === \"player\" && !this.getPlayer()) {\n        throw new Error(\"Cannot switch to player mode: no player has been set\");\n      }\n    },\n\n    /**\n     * When setting the script property, store it in the browser\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyScript(value, old) {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT, value);\n      if (this.getRecorder()) {\n        this.getRecorder().setScript(value);\n      }\n    },\n\n    /**\n     * Apply the \"autoplay\" property and store it in local storage\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyAutoplay(value, old) {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY, value);\n    },\n\n    /**\n     * Event handler for record toggle button\n     * @param e\n     */\n    _toggleRecord(e) {\n      if (e.getData()) {\n        this.record();\n      }\n    },\n\n    /**\n     * Event handler for replay button\n     * @param e\n     * @private\n     */\n    _startReplay(e) {\n      if (e.getData()) {\n        // start\n        if (this.getScript()) {\n          // reload\n          this.setAutoplay(true);\n          window.location.reload();\n        }\n      }\n    },\n\n    /**\n     * Uploads content to the browser. Returns the content of the file.\n     * @return {Promise<String>}\n     * @private\n     */\n    async _upload() {\n      return new Promise((resolve, reject) => {\n        let input = document.getElementById(cboulanger.eventrecorder.UiController.FILE_INPUT_ID);\n        input.addEventListener(\"change\", e => {\n          let file = e.target.files[0];\n          if (!file.name.endsWith(\".eventrecorder\")) {\n            reject(new Error(\"Not an eventrecorder script\"));\n          }\n          let reader = new FileReader();\n          reader.addEventListener(\"loadend\", () => {\n            resolve(reader.result);\n          });\n          reader.addEventListener(\"error\", reject);\n          reader.readAsText(file);\n        });\n        input.click();\n      });\n    },\n\n    /**\n     * Donwload content\n     * @param filename\n     * @param text\n     * @private\n     */\n    _download(filename, text) {\n      var element = document.createElement(\"a\");\n      element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text));\n      element.setAttribute(\"download\", filename);\n      element.style.display = \"none\";\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    },\n\n    /**\n     * Get the content of a gist by its id\n     * @param gist_id {String}\n     * @return {Promise<*>}\n     * @private\n     */\n    _getRawGist: async function (gist_id) {\n      return new Promise((resolve, reject) => {\n        let url = `https://api.github.com/gists/${gist_id}`;\n        let req = new qx.io.request.Jsonp(url);\n        req.addListener(\"success\", e => {\n          let response = req.getResponse();\n          if (!qx.lang.Type.isObject(response.data.files)) {\n            reject(new Error(\"Unexpected response: \" + JSON.stringify(response)));\n          }\n          let filenames = Object.getOwnPropertyNames(response.data.files);\n          let file = response.data.files[filenames[0]];\n          if (!file.filename.endsWith(\".eventrecorder\")) {\n            reject(new Error(\"Gist is not an eventrecorder script\"));\n          }\n          let script = file.content;\n          resolve(script);\n        });\n        req.addListener(\"statusError\", e => reject(new Error(e.getData())));\n        req.send();\n      });\n    },\n\n    /**\n     * Returns the name of the application by using the parent directory of the\n     * index.html script\n     * @return {string}\n     * @private\n     */\n    _getApplicationName() {\n      return window.document.location.pathname.split(\"/\").slice(-2, -1).join(\"\");\n    },\n\n    /**\n     * Sets up an editor in the given window\n     * @param win {qx.ui.window.Window}\n     * @private\n     */\n    __setupEditor(win) {\n      qookery.contexts.Qookery.loadResource(\n        qx.util.ResourceManager.getInstance().toUri(\"cboulanger/eventrecorder/forms/editor.xml\"), this,\n        xmlSource => {\n          let xmlDocument = qx.xml.Document.fromString(xmlSource);\n          let parser = qookery.Qookery.createFormParser();\n          let formComponent = parser.parseXmlDocument(xmlDocument);\n          formComponent.setQxObjectId(\"editor\");\n          this.addOwnedQxObject(formComponent);\n          let editorWidget = formComponent.getMainWidget();\n          win.add(editorWidget);\n          win.setQxObjectId(\"window\");\n          formComponent.addOwnedQxObject(win);\n          editorWidget.addListener(\"appear\", () => formComponent.getModel().setLeftEditorContent(this.getScript()));\n          this.bind(\"script\", formComponent.getModel(), \"leftEditorContent\");\n          let formModel = formComponent.getModel();\n          formModel.bind(\"leftEditorContent\", this, \"script\");\n          formModel.addListener(\"changeTargetScriptType\", e => this.translateTo(formModel.getTargetScriptType(), formModel.getTargetMode()));\n          formModel.addListener(\"changeTargetMode\", e => this.translateTo(formModel.getTargetScriptType(), formModel.getTargetMode()));\n          qx.event.Timer.once(() => this.__setupAutocomplete(), this, 1000);\n          parser.dispose();\n          this.edit();\n        });\n    },\n\n    /**\n     * Configures the autocomplete feature in the editor(s)\n     * @private\n     */\n    __setupAutocomplete () {\n      const langTools = ace.require(\"ace/ext/language_tools\");\n      let tokens = [];\n      let iface = qx.Interface.getByName(\"cboulanger.eventrecorder.IPlayer\").$$members;\n      for (let key of Object.getOwnPropertyNames(iface)) {\n        if (key.startsWith(\"cmd_\") && typeof iface[key] == \"function\") {\n          let code = iface[key].toString();\n          let params = code.slice(code.indexOf(\"(\") + 1, code.indexOf(\")\")).split(/,/).map(p => p.trim());\n          let caption = key.substr(4).replace(/_/g, \"-\");\n          let snippet = caption + \" \" + params.map((p, i) => `\\${${i+1}:${p}}`).join(\" \") + \"\\$0\";\n          let meta = params.join(\" \");\n          let value = null;\n          tokens.push({caption, type: \"command\", snippet, meta, value});\n        }\n      }\n      let ids = [];\n      let traverseObjectTree = function(obj) {\n        if (typeof obj.getQxObjectId !== \"function\") {\n          return;\n        }\n        let id = obj.getQxObjectId();\n        if (id) {\n          ids.push(qx.core.Id.getAbsoluteIdOf(obj));\n        }\n        for (let owned of obj.getOwnedQxObjects()) {\n          traverseObjectTree(owned);\n        }\n      };\n      let registeredObjects = Object.values(qx.core.Id.getInstance().__registeredObjects); //FIXME\n      for (let obj of registeredObjects) {\n        traverseObjectTree(obj);\n      }\n      for (let id of ids) {\n        tokens.push({caption: id, type: \"id\", value: id});\n      }\n      const player = this.getPlayer();\n      const completer = {\n        getCompletions: function (editor, session, pos, prefix, callback) {\n          if (prefix.length === 0) {\n            callback(null, []);\n            return;\n          }\n          let line = editor.session.getLine(pos.row).substr(0, pos.column);\n          let numberOfTokens = player._tokenize(line).length;\n          let options = tokens\n          // filter on positional argument\n            .filter(token => (token.type === \"command\" && numberOfTokens === 1) || (token.type === \"id\" && numberOfTokens === 2))\n            // filter on word match\n            .filter(token => token.caption.toLocaleLowerCase().substr(0, prefix.length) === prefix.toLocaleLowerCase())\n            // create popup data\n            .map(token => {\n              token.score = 100 - (token.caption.length - prefix.length);\n              return token;\n            });\n          callback(null, options);\n        }\n      };\n      langTools.addCompleter(completer);\n    },\n\n    /*\n     ===========================================================================\n       PUBLIC API\n     ===========================================================================\n     */\n\n    /**\n     * Returns a player instance. Caches the result\n     * @param type\n     * @private\n     * @return {cboulanger.eventrecorder.IPlayer}\n     */\n    getPlayerByType(type) {\n      if (!type) {\n        throw new Error(\"No player type given!\");\n      }\n      if (this.__players[type]) {\n        return this.__players[type];\n      }\n      let clazz = cboulanger.eventrecorder.player[qx.lang.String.firstUp(type)];\n      if (!clazz) {\n        throw new Error(`A player of type '${type}' does not exist.`);\n      }\n      const player = new clazz();\n      this.__players[type] = player;\n      return player;\n    },\n\n    /**\n     * Starts recording\n     */\n    async record() {\n      let recorder = this.getRecorder();\n      if (this.getScript().trim()!==\"\") {\n        let mode = await dialog.Dialog.select(\n          \"Do you want to overwrite your script or append new events?\",\n          [\n            {label: \"Append\", value: \"append\"},\n            {label: \"Overwrite\", value: \"overwrite\"}\n          ]\n        ).promise();\n        if (!mode) {\n          this.getQxObject(\"record\").setValue(false);\n          return;\n        }\n        recorder.setMode(mode);\n      }\n      recorder.start();\n    },\n\n    /**\n     * Stops recording/replaying\n     */\n    stop() {\n      if (this.getRecorder().isRunning()) {\n        this.getRecorder().stop();\n        let script = this.getRecorder().getScript();\n        this.setScript(script);\n      }\n      if (this.getPlayer() && this.getPlayer().isRunning()) {\n        this.getPlayer().stop();\n      }\n    },\n\n    /**\n     * Replays the current script\n     * @return {Promise<void>}\n     */\n    async replay() {\n      if (!this.getScript()) {\n        throw new Error(\"No script to replay\");\n      }\n      let player = this.getPlayer();\n      if (!player) {\n        throw new Error(\"No player has been set\");\n      }\n      this.setMode(\"player\");\n      let infoPane = cboulanger.eventrecorder.InfoPane.getInstance();\n      infoPane.useIcon(\"waiting\");\n      if (qx.core.Environment.get(\"eventrecorder.show_progress\")) {\n        player.addListener(\"progress\", e => {\n          let [step, steps] = e.getData();\n          infoPane.display(`Replaying ... (${step}/${steps})`);\n        });\n      }\n      let error = null;\n      try {\n        await player.replay(this.getScript());\n      } catch (e) {\n        error = e;\n      }\n      infoPane.hide();\n      this.setMode(\"recorder\");\n      if (error) {\n        throw error;\n      }\n    },\n\n    /**\n     * Edits the current script\n     */\n    edit() {\n      if (this.__editorWindow) {\n        this.__editorWindow.open();\n        return;\n      }\n      let win = new qx.ui.window.Window(\"Edit script\");\n      win.set({\n        layout: new qx.ui.layout.VBox(5),\n        showMinimize: false,\n        width: 800,\n        height: 600\n      });\n      win.addListener(\"appear\", () => {\n        win.center();\n      });\n      this.__editorWindow = win;\n      this.__setupEditor(win);\n    },\n\n    /**\n     * Save the current script to the local machine\n     */\n    save() {\n      qx.event.Timer.once(() => {\n        let filename = this._getApplicationName() + \".eventrecorder\";\n        this._download(filename, this.getScript());\n      }, null, 0);\n    },\n\n    /**\n     * Translates the text in the left editor into the language produced by the\n     * given player type. Alerts any errors that occur.\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {String|false}\n     */\n    translateTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      const model = this.getQxObject(\"editor\").getModel();\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let editedScript = model.getLeftEditorContent();\n      try {\n        let translatedText = exporter.translate(editedScript);\n        model.setRightEditorContent(translatedText);\n        return translatedText;\n      } catch (e) {\n        this.error(e);\n        dialog.Dialog.error(e.message);\n      }\n      return false;\n    },\n\n    /**\n     * Export the script in the given format\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {Boolean}\n     */\n    exportTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let translatedScript = this.getQxObject(\"editor\").getModel().getRightEditorContent();\n      if (!translatedScript) {\n        if (!this.getScript()) {\n          dialog.Dialog.error(\"No script to export!\");\n          return false;\n        }\n        translatedScript = this.translateTo(playerType);\n      }\n      qx.event.Timer.once(() => {\n        let filename = this._getApplicationName();\n        this._download(`${filename}.${exporter.getExportFileExtension()}`, translatedScript);\n      }, null, 0);\n      return true;\n    },\n\n    /**\n     * Load a script from the local machine\n     * @return {Promise<void>}\n     */\n    async load() {\n      try {\n        let script = await this._upload();\n        this.setScript(script);\n      } catch (e) {\n        dialog.Dialog.error(e.message);\n      }\n    },\n\n    /**\n     * Loads a gist selected from a github user's gists\n     * @return {Promise<void>}\n     */\n    loadUserGist: async function () {\n      let formData = {\n        username: {\n          type: \"Textfield\",\n          label: \"Username\",\n          options\n        },\n        show_all: {\n          type: \"Checkbox\",\n          value: false,\n          label: \"Show all scripts (even if URL does not match)\"\n        }\n      };\n      let answer = await dialog.Dialog.form(\"Please enter the GitHub username\", formData).promise();\n      if (!answer || !answer.username.trim()) {\n        return;\n      }\n      let username = answer.username;\n      cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"waiting\").display(\"Retrieving data from GitHub...\");\n      let gist_data = await new Promise((resolve, reject) => {\n        let url = `https://api.github.com/users/${username}/gists`;\n        let req = new qx.io.request.Jsonp(url);\n        req.addListener(\"success\", e => {\n          cboulanger.eventrecorder.InfoPane.getInstance().hide();\n          let response = req.getResponse();\n          if (response.data && response.message) {\n            reject(response.message);\n          } else if (response.data) {\n            resolve(response.data);\n          }\n          reject(new Error(\"Invalid response.\"));\n        });\n        req.addListener(\"statusError\", reject);\n        req.send();\n      });\n\n      let suffix = `.eventrecorder`;\n      if (!answer.show_all) {\n        suffix = \".\" + this._getApplicationName() + suffix;\n      }\n      let options = gist_data\n        .filter(entry => entry.description && Object.values(entry.files).some(file => file.filename.endsWith(suffix)))\n        .map(entry => ({\n          label: entry.description,\n          value: entry.id\n        }));\n      if (options.length===0) {\n        dialog.Dialog.error(\"No matching gists were found.\");\n        return;\n      }\n      formData = {\n        id: {\n          type: \"SelectBox\",\n          label: \"Script\",\n          options\n        }\n      };\n      answer = await dialog.Dialog.form(\"Please select from the following scripts:\", formData).promise();\n\n      if (!answer || !answer.id) {\n        return;\n      }\n      this.setScript(await this._getRawGist(answer.id));\n    },\n\n    /**\n     * Loads a gist by its id.\n     * @return {Promise<void>}\n     */\n    async loadGistById() {\n      let answer = await dialog.Dialog.prompt(\"Please enter the GitHub username\");\n      if (!answer || !answer.id) {\n        return;\n      }\n      this.setScript(await this._getRawGist(answer.id));\n    }\n  },\n\n  /**\n   * Will be called after class has been loaded, before application startup\n   */\n  defer: function() {\n    if (!qx.core.Environment.get(\"module.objectid\") || !qx.core.Environment.get(\"eventrecorder.enabled\")) {\n     return;\n    }\n    qookery.Qookery.setOption(\n      qookery.Qookery.OPTION_EXTERNAL_LIBRARIES,\n      qx.util.ResourceManager.getInstance().toUri(\"cboulanger/eventrecorder/js\"));\n    // called when application is ready\n    qx.bom.Lifecycle.onReady(async () => {\n      let infoPane = cboulanger.eventrecorder.InfoPane.getInstance();\n      infoPane.useIcon(\"waiting\");\n      infoPane.display(\"Initializing Event Recorder, please wait...\");\n      let dispayedText = infoPane.getDisplayedText();\n      // assign object ids if object id generator has been included\n      if (qx.Class.isDefined(\"cboulanger.eventrecorder.ObjectIdGenerator\")) {\n        await new Promise(resolve => {\n          const objIdGen = qx.Class.getByName(\"cboulanger.eventrecorder.ObjectIdGenerator\").getInstance();\n          objIdGen.addListenerOnce(\"done\", resolve);\n        });\n      }\n\n      // hide splash screen if it hasn't used by other code yet\n      if (infoPane.getDisplayedText() === dispayedText) {\n        infoPane.hide();\n      }\n      // create controller\n      let controller = new cboulanger.eventrecorder.UiController();\n      qx.core.Init.getApplication().getRoot().add(controller, {top:0, right:10});\n      if (!qx.core.Environment.get(\"eventrecorder.hidden\")) {\n        controller.show();\n      }\n    });\n  }\n});\n"
  ]
}