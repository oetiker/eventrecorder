{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/player/Qooxdoo.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cboulanger",
    "eventrecorder",
    "player",
    "Abstract",
    "include",
    "MState",
    "implement",
    "IPlayer",
    "properties",
    "canReplayInBrowser",
    "refine",
    "init",
    "members",
    "getExportFileExtension",
    "translate",
    "script",
    "lines",
    "_translate",
    "split",
    "map",
    "line",
    "startsWith",
    "filter",
    "Boolean",
    "unshift",
    "push",
    "join",
    "cmd_info",
    "text",
    "getMode",
    "cmd_hide_info",
    "cmd_widget_info",
    "id",
    "cmd_delay",
    "delayInMs",
    "Math",
    "min",
    "getMaxDelay",
    "cmd_wait",
    "timeInMs",
    "cmd_await_property_value",
    "property",
    "value",
    "generateWaitForConditionCode",
    "lang",
    "String",
    "firstUp",
    "JSON",
    "stringify",
    "replace",
    "cmd_await_property_match_json",
    "json",
    "Type",
    "isString",
    "regExLiteral",
    "createRegexpForJsonComparison",
    "timeoutmsg",
    "type",
    "generateWaitForEventCode",
    "cmd_await_event",
    "generateWaitForEventTimoutFunction",
    "undefined",
    "_globalRef",
    "cmd_await_event_data",
    "data",
    "e",
    "Error",
    "cmd_await_event_match_json",
    "cmd_assert_appeared",
    "cmd_check_appear",
    "cmd_assert_disappeared",
    "cmd_check_disappear",
    "cmd_execute",
    "cmd_set_value",
    "cmd_await_value",
    "cmd_open_tree_node",
    "nodeIndex",
    "cmd_close_tree_node",
    "cmd_open_tree_node_treevirtual",
    "cmd_close_tree_node_treevirtual",
    "cmd_set_selection",
    "selectedId",
    "cmd_await_selection",
    "cmd_set_model_selection",
    "indexArray",
    "cmd_set_selection_from_selectables",
    "index",
    "cmd_await_selection_from_selectables",
    "cmd_reset_selection",
    "cmd_set_table_selection",
    "interval",
    "cmd_set_row_selection",
    "rowIndex",
    "Qooxdoo"
  ],
  "mappings": "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",
  "file": "Qooxdoo.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * This is an event player that works in the client\n */\nqx.Class.define(\"cboulanger.eventrecorder.player.Qooxdoo\", {\n\n  extend: cboulanger.eventrecorder.player.Abstract,\n  include: [cboulanger.eventrecorder.MState],\n  implement: [cboulanger.eventrecorder.IPlayer],\n\n  properties: {\n    canReplayInBrowser: {\n      refine: true,\n      init: true\n    }\n  },\n\n  members:\n  {\n\n    /**\n     * @inheritDoc\n     */\n    getExportFileExtension() {\n      return \"js\";\n    },\n\n    /**\n     * Translates the intermediate code into the target language\n     * @param script\n     * @return {string} executable code\n     */\n    translate(script) {\n      let lines = this._translate(script)\n        .split(/\\n/)\n        .map(line => (line.startsWith(\"(\") ? `await ${line};` : line))\n        .filter(line => Boolean(line))\n        .map(line => \"  \" + line);\n      lines.unshift(\"async function test() {\");\n      lines.push(\"}\");\n      return lines.join(\"\\n\");\n    },\n\n    /*\n    ============================================================================\n       COMMANDS\n    ============================================================================\n    */\n\n    /**\n     * @inheritDoc\n     */\n    cmd_info(text) {\n      if (this.getMode() === \"presentation\") {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"info\").display(\"${text}\");`;\n      }\n      return `console.log(\"${text}\");`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_hide_info(text) {\n      if (this.getMode() === \"presentation\" ) {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().hide();`;\n      }\n      return \"\";\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_widget_info(id, text) {\n      if (this.getMode() === \"presentation\") {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"info\").display(\"${text}\",qx.core.Id.getQxObject(\"${id}\"));`;\n      }\n      return \"\";\n    },\n\n    /**\n     * Generates code that causes the given delay (in milliseconds).\n     * The delay is capped by the {@link #cboulanger.eventrecorder.player.Abstract#maxDelay} property\n     * and will only be caused in presentation mode\n     * @param delayInMs {Number}\n     * @return {string}\n     */\n    cmd_delay(delayInMs) {\n      delayInMs = Math.min(delayInMs, this.getMaxDelay());\n      return this.getMode() === \"presentation\" && delayInMs > 0 ? `(new Promise(resolve => setTimeout(resolve,${delayInMs})))`:\"\";\n    },\n\n    /**\n     * Generates code that waits the given time in milliseconds, regardless of player mode\n     * @param timeInMs {Number}\n     * @return {string}\n     */\n    cmd_wait(timeInMs) {\n      return `(new Promise(resolve => setTimeout(resolve,${timeInMs})))`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_property_value(id, property, value) {\n      return this.generateWaitForConditionCode(`JSON.stringify(qx.core.Id.getQxObject(\"${id}\").get${qx.lang.String.firstUp(property)}())==='${JSON.stringify(value).replace(/'/, \"\\\\'\")}'`);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_property_match_json(id, property, json) {\n      if (!qx.lang.Type.isString(json)) {\n        json = JSON.stringify(json);\n      }\n      let regExLiteral = this.createRegexpForJsonComparison(json);\n      let timeoutmsg = `Timeout waiting for ID(${id}).${property} to match /${regExLiteral.replace(/\\\\/,\"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\")}/.`;\n      let type = \"change\" + qx.lang.String.firstUp(property);\n      return this.generateWaitForEventCode(id, type, `{verbatim}/${regExLiteral}/`, timeoutmsg);\n    },\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @return {*|string}\n     */\n    cmd_await_event(id, type) {\n      if (this.getMode()===\"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, undefined, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve(false)`);\n      }\n      return this.generateWaitForEventCode(id, type);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_event_data(id, type, data) {\n      if (data !== undefined) {\n        try {\n          JSON.stringify(data);\n        } catch (e) {\n          throw new Error(\"Data must be serializable to JSON\");\n        }\n      }\n      if (this.getMode() === \"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, data, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve();`);\n      }\n      return this.generateWaitForEventCode(id, type, data);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_event_match_json(id, type, json) {\n      if (this.getMode()===\"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, json, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve();`);\n      }\n      return this.generateWaitForEventCode(id, type, json);\n    },\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id becomes visible and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_appeared(id) {\n      return `qx.core.Assert.assertTrue(qx.core.Id.getQxObject(\"${id}\").isVisible(),\"Failed: Object with id ${id} is not visible.\")`;\n    },\n\n    /**\n     * @deprecated\n     */\n    cmd_check_appear: this.cmd_assert_appeared,\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id disappears and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_disappeared(id) {\n      return `qx.core.Assert.assertFalse(qx.core.Id.getQxObject(\"${id}\").isVisible(),\"Failed: Object with id ${id} is visible.\")`;\n    },\n\n    /**\n     * @deprecated\n     */\n    cmd_check_disappear: this.cmd_assert_disappeared,\n\n    /**\n     * @inheritDoc\n     */\n    cmd_execute(id) {\n      return `qx.core.Id.getQxObject(\"${id}\").fireEvent(\"execute\");`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_set_value(id, data) {\n      return `qx.core.Id.getQxObject(\"${id}\").setValue(${JSON.stringify(data)});`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_value(id, value) {\n      return this.cmd_await_property_value(id, \"value\", value);\n    },\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} The id of the {@link qx.ui.tree.VirtualTree}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node(id, nodeIndex) {\n      return `let t = qx.core.Id.getQxObject(\"${id}\"); t.openNode(t.getLookupTable().getItem(${nodeIndex}));`;\n    },\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node(id, nodeIndex) {\n      return `let t = qx.core.Id.getQxObject(\"${id}\"); t.closeNode(t.getLookupTable().getItem(${nodeIndex}));`;\n    },\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node_treevirtual(id, nodeIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").getDataModel().setState(${nodeIndex},{bOpened:true});`;\n    },\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node_treevirtual(id, nodeIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").getDataModel().setState(${nodeIndex},{bOpened:false});`;\n    },\n\n    /**\n     * Generates code that sets a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected.\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that is selected. Only one widget can be selected at this time\n     * @return {String}\n     */\n    cmd_set_selection(id, selectedId) {\n      return `qx.core.Id.getQxObject(\"${id}\").setSelection([qx.core.Id.getQxObject(\"${selectedId}\")]);`;\n    },\n\n    /**\n     * Generates code that awaits a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected within the timeout\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that should be selected\n     * @return {String}\n     */\n    cmd_await_selection(id, selectedId) {\n      let timeoutmsg = `Timeout when waiting for selection of object '${selectedId}' on '${id}'.`;\n      return this.generateWaitForEventCode(id, \"changeSelection\", `{verbatim}[qx.core.Id.getQxObject(\"${selectedId}\")]`,timeoutmsg);\n    },\n\n    /**\n     * Generates code that sets a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {Array} An array containing the indexes of the models\n     * @return {String}\n     */\n    cmd_set_model_selection(id, indexArray) {\n      return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection(new qx.data.Array(${JSON.stringify(indexArray)}.map(i => o.getModel().getItem(i))));`;\n    },\n\n    /**\n     * Generates code that awaits a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {Array} An array containing the indexes of the models\n     * @return {String}\n     */\n    // cmd_await_model_selection(id, indexArray) {\n    //\n    //   return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection(new qx.data.Array(${JSON.stringify(indexArray)}.map(i => o.getModel().getItem(i))))`;\n    //   return `(waitForEvent(qx.core.Id.getQxObject(\"${id}\").getSelection(), \"change\",${data}, ${this.getTimeout()}, \"${timeoutmsg||\"Timeout waiting for event '\"+type+\"'\"}\"))`;\n    // },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_set_selection_from_selectables(id, index) {\n      return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection([o.getSelectables()[${index}]]);`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_selection_from_selectables(id, index) {\n      return this.generateWaitForEventCode(id, \"changeSelection\", `{verbatim}[qx.core.Id.getQxObject(\"${id}\").getSelectables()[${index}]]`);\n    },\n\n    /**\n     * Resets the selection of a widget that has a `selection` property or a `resetSelection` method.\n     * @param id {String} The id of the widget\n     * @return {string}\n     */\n    cmd_reset_selection(id) {\n      return `qx.core.Id.getQxObject(\"${id}\").resetSelection();`;\n    },\n\n    /**\n     * Generates code that sets an selection interval on a {@link qx.ui.table.Table}\n     * @param id {String} The id of a {@link qx.ui.table.Table}\n     * @param interval {String} The first and the last row to be selected, separated by comma.\n     * @return {String}\n     */\n    cmd_set_table_selection(id, interval) {\n      return `qx.core.Id.getQxObject(\"${id}\").addSelectionInterval(${interval});`;\n    },\n\n    /**\n     * Generates code that set the selection on a {@link qx.ui.virtual.selection.Row} object\n     * @param id {String} The id of a qx.ui.virtual.selection.Row object\n     * @param rowIndex {String|Number} The index of the row to be selected\n     * @return {String}\n     */\n    cmd_set_row_selection(id, rowIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").selectItem(${rowIndex});`;\n    }\n  }\n});\n"
  ]
}