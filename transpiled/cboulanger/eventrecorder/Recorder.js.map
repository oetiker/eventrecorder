{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/Recorder.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "cboulanger",
    "eventrecorder",
    "MHelperMethods",
    "MState",
    "construct",
    "__excludeIds",
    "__lines",
    "addGlobalEventListener",
    "target",
    "event",
    "isRunning",
    "id",
    "getAttribute",
    "Id",
    "getAbsoluteIdOf",
    "recordEvent",
    "properties",
    "mode",
    "check",
    "nullable",
    "init",
    "members",
    "__lastEventTimestamp",
    "__latInput",
    "excludeIds",
    "ids",
    "lang",
    "Type",
    "isArray",
    "found",
    "excluded",
    "substr",
    "length",
    "debug",
    "push",
    "getExcludedIds",
    "getScript",
    "join",
    "setScript",
    "script",
    "Assert",
    "assertString",
    "split",
    "beforeStart",
    "getMode",
    "document",
    "location",
    "host",
    "pathname",
    "concat",
    "Date",
    "toLocaleString",
    "createIntermediateCodeFromEvent",
    "afterStop",
    "getTrackEvents",
    "lines",
    "type",
    "getType",
    "data",
    "getData",
    "owner",
    "getQxOwner",
    "ui",
    "form",
    "DateField",
    "ComboBox",
    "VirtualComboBox",
    "tree",
    "FolderOpenButton",
    "FocusHandler",
    "getInstance",
    "isFocusRoot",
    "getQxObject",
    "__lastInput",
    "isModelSelection",
    "Array",
    "getModel",
    "ownerId",
    "model",
    "indexes",
    "toArray",
    "map",
    "indexOf",
    "item",
    "JSON",
    "stringify",
    "isString",
    "VirtualTree",
    "row",
    "getLookupTable",
    "nodeId",
    "treevirtual",
    "TreeVirtual",
    "selection",
    "getDataModel",
    "getRowFromNodeId",
    "virtual",
    "Row",
    "table",
    "Model",
    "ranges",
    "getSelectedRanges",
    "minIndex",
    "maxIndex",
    "selected",
    "getQxObjectId",
    "selectedId",
    "getSelectables",
    "index",
    "startsWith",
    "getTrackPropertyChanges",
    "property",
    "String",
    "firstLow",
    "now",
    "msSinceLastEvent",
    "unshift",
    "Recorder"
  ],
  "mappings": "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",
  "file": "Recorder.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n************************************************************************ */\n\n/**\n * The base class of all recorder types\n * @require(qx.bom.Element)\n */\nqx.Class.define(\"cboulanger.eventrecorder.Recorder\", {\n  extend : qx.core.Object,\n  include : [\n    cboulanger.eventrecorder.MHelperMethods,\n    cboulanger.eventrecorder.MState\n  ],\n\n  /**\n   * Constructor\n   */\n  construct : function() {\n    this.base(arguments);\n\n    this.__excludeIds = [];\n    this.__lines = [];\n\n    this.addGlobalEventListener((target, event) => {\n      if (!this.isRunning()) {\n        return;\n      }\n      let id;\n      if (typeof target.getAttribute == \"function\") {\n        id = target.getAttribute(\"data-qx-object-id\");\n      } else if (target instanceof qx.core.Object) {\n        id = qx.core.Id.getAbsoluteIdOf(target, true);\n      } else {\n        return;\n      }\n      if (id) {\n        this.recordEvent(id, event, target);\n      }\n    });\n  },\n\n  properties: {\n    mode: {\n      check: [\"overwrite\", \"append\"],\n      nullable: false,\n      init: \"overwrite\"\n    }\n  },\n\n  /**\n   * The methods and simple properties of this class\n   */\n  members :\n  {\n    __lines: null,\n    __excludeIds: null,\n    __lastEventTimestamp: null,\n    __latInput: null,\n\n    /**\n     * Exclude the given id(s) from recording\n     * @param ids {Array|String}\n     */\n    excludeIds(ids) {\n      // normalize to array\n      ids = qx.lang.Type.isArray(ids)? ids: [ids];\n      // add ids that are not yet included by path\n      for (let id of ids) {\n        let found=false;\n        for (let excluded of this.__excludeIds) {\n          if (id.substr(0, excluded.length) === excluded) {\n            found = true;\n          }\n        }\n        if (!found) {\n          this.debug(`Excluding ${id} from event recording.`);\n          this.__excludeIds.push(id);\n        }\n      }\n    },\n\n    /**\n     * Returns the list of excluded ids.\n     * @return {String[]}\n     */\n    getExcludedIds() {\n      return this.__excludeIds;\n    },\n\n    /**\n     * Returns the recorded script\n     * @return {String}\n     */\n    getScript() {\n      return this.__lines.join(\"\\n\");\n    },\n\n    /**\n     * Sets the script to which the recorder should append new events\n     * @param script {String}\n     */\n    setScript(script) {\n      if (script) {\n        qx.core.Assert.assertString(script);\n        this.__lines = script.split(/\\n/);\n      } else {\n        this.__lines = [];\n      }\n    },\n\n    /**\n     * Called by start()\n     */\n    beforeStart() {\n      switch (this.getMode()) {\n        case \"overwrite\":\n          this.__lines = [\n            `config-set-mode presentation`,\n            `assert-match-uri ${document.location.host + document.location.pathname}`,\n            \"\"\n          ];\n          break;\n        case \"append\":\n          this.__lines = this.__lines.concat([\n            \"\",\n            `# appended at ${(new Date()).toLocaleString()}`,\n            \"\"\n          ]);\n          break;\n      }\n      this.__lastEventTimestamp = 0;\n    },\n\n    /**\n     * Called by the global event listener\n     * @param id {String}\n     * @param event {qx.event.type.Event}\n     * @param target {qx.bom.Element}\n     * @private\n     * @return {boolean} returns true if the event was recorded, false if\n     * it was ignored because of the list of excluded ids.\n     */\n    recordEvent(id, event, target) {\n      for (let excluded of this.__excludeIds) {\n        if (id.substr(0, excluded.length) === excluded) {\n          return false;\n        }\n      }\n      this.__lines = this.__lines.concat(this.createIntermediateCodeFromEvent(id, event, target));\n      return true;\n    },\n\n    /**\n     * Executed after stop()\n     */\n    afterStop() {\n      this.__lastEventTimestamp = 0;\n    },\n\n    /**\n     * Given an object id, the event name and the even target, return one or more\n     * pieces of intermediate code from which a player can replay the user action\n     * that lead to this event. Return an array, each element is one line of code\n     * @param {String} id The id of the qooxdoo object\n     * @param {qx.event.Event} event The event that was fired\n     * @param {qx.bom.Element|qx.core.Object} target The event target\n     * @return {String[]} An array of script lines\n     */\n    createIntermediateCodeFromEvent(id, event, target) {\n      // opt out of recording\n      if (typeof target.getTrackEvents == \"function\" && !target.getTrackEvents()) {\n        return [];\n      }\n      let lines = [];\n      const type = event.getType();\n      let data = typeof event.getData == \"function\" ? event.getData() : null;\n      let owner = typeof target.getQxOwner == \"function\" ? target.getQxOwner() : null;\n      switch (type) {\n        case \"execute\":\n          switch (true) {\n            case owner instanceof qx.ui.form.DateField:\n            case owner instanceof qx.ui.form.ComboBox:\n            case owner instanceof qx.ui.form.VirtualComboBox:\n            case target instanceof qx.ui.tree.core.FolderOpenButton:\n              return [];\n          }\n          lines.push(`execute ${id}`);\n          break;\n        case \"appear\":\n        case \"disappear\":\n          if (qx.ui.core.FocusHandler.getInstance().isFocusRoot(qx.core.Id.getQxObject(id))) {\n            return [`assert-${type}ed ${id}`];\n          }\n          return [];\n\n        case \"input\":\n          this.__lastInput = data;\n          return [];\n\n        case \"change\": {\n          // model selection\n          const isModelSelection =\n            target instanceof qx.data.Array &&\n            target.getQxOwner() &&\n            typeof target.getQxOwner().getModel == \"function\";\n          if (isModelSelection) {\n            const owner = target.getQxOwner();\n            const ownerId = qx.core.Id.getAbsoluteIdOf(owner);\n            const model = owner.getModel();\n            const indexes = target.toArray().map(item => model.indexOf(item));\n            lines.push(`set-model-selection ${ownerId} ${JSON.stringify(indexes)}`);\n            break;\n          }\n          // form fields\n          if (qx.lang.Type.isString(data) && data === this.__lastInput) {\n            lines.push(`set-value ${id} \"${data}\"`);\n          }\n          break;\n        }\n\n        case \"open\":\n        case \"close\": {\n          if (target instanceof qx.ui.tree.VirtualTree) {\n            let row = target.getLookupTable().indexOf(data);\n            if (row < 0) {\n              return [];\n            }\n            lines.push(`${type}-tree-node ${id} ${row}`);\n          }\n          break;\n        }\n        // qx.ui.treevirtual.TreeVirtual\n        case \"treeClose\":\n        case \"treeOpenWithContent\":\n        case \"treeOpenWhileEmpty\":\n          lines.push(`${type===\"treeClose\"?\"close-tree-node-treevirtual\":\"open-tree-node-treevirtual\"} ${id} ${data.nodeId}`);\n          break;\n\n        case \"changeSelection\": {\n          if (target instanceof qx.ui.treevirtual.TreeVirtual) {\n            let selection = event.getData();\n            if (!selection.length) {\n              return [];\n            }\n            let row = target.getDataModel().getRowFromNodeId(selection[0].nodeId);\n            lines.push(`set-table-selection ${id} ${row},${row}`);\n          }\n          if (target instanceof qx.ui.virtual.selection.Row) {\n            lines.push(`set-row-selection ${id} ${data}`);\n            break;\n          }\n          if (target instanceof qx.ui.table.selection.Model) {\n            lines.push(`reset-selection ${id}`);\n            let ranges = target.getSelectedRanges();\n            if (ranges.length) {\n              lines.push(`set-table-selection ${id} ${ranges[0].minIndex},${ranges[0].maxIndex}`);\n            }\n            break;\n          }\n          if (data && data.length && qx.lang.Type.isArray(data)) {\n            let selected = data[0];\n            if (selected instanceof qx.core.Object && selected.getQxObjectId()) {\n              let selectedId = qx.core.Id.getAbsoluteIdOf(selected);\n              lines.push(`set-selection ${id} ${selectedId}`);\n            } else if (typeof target.getSelectables == \"function\") {\n              let index = target.getSelectables().indexOf(selected);\n              lines.push(`set-selection-from-selectables ${id} ${index}`);\n            }\n            break;\n          }\n          return [];\n        }\n        default:\n          // record change events if explicitly requested\n          if (type.startsWith(\"change\") && typeof target.getTrackPropertyChanges == \"function\") {\n            if ( target.getTrackPropertyChanges() ) {\n              let property = qx.lang.String.firstLow(type.substr(6));\n              lines.push(`await-match-json ${id} ${property} ${JSON.stringify(data)}`);\n              break;\n            }\n          }\n          // ignore all others\n          return [];\n      }\n      // prepend a wait command to replay delays in user action\n      let now = Date.now();\n      let msSinceLastEvent = now - (this.__lastEventTimestamp || now);\n      this.__lastEventTimestamp = now;\n      if (msSinceLastEvent) {\n        lines.unshift(`delay ${msSinceLastEvent}`);\n      }\n      return lines;\n    }\n  }\n});\n"
  ]
}