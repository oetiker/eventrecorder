{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/contrib/ergobyte_qookery_v0.7.0-pre/qookery/source/class/qookery/Qookery.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "A_FORMAT",
    "A_ICON",
    "A_MAP",
    "A_TOOL_TIP_TEXT",
    "OPTION_DEFAULT_LAYOUT_SPACING_X",
    "OPTION_DEFAULT_LAYOUT_SPACING_Y",
    "OPTION_DEFAULT_LIVE_UPDATE",
    "OPTION_DEFAULT_NATIVE_CONTEXT_MENU",
    "OPTION_EXTERNAL_LIBRARIES",
    "SERVICE_APPLICATION",
    "SERVICE_MODEL_PROVIDER",
    "SERVICE_REGISTRY",
    "SERVICE_RESOURCE_LOADER",
    "__OPTIONS",
    "getOption",
    "optionName",
    "defaultValue",
    "core",
    "Assert",
    "assertString",
    "value",
    "qookery",
    "Qookery",
    "undefined",
    "setOption",
    "getRegistry",
    "internal",
    "Registry",
    "getInstance",
    "getService",
    "serviceName",
    "required",
    "registry",
    "service",
    "Error",
    "createFormParser",
    "variables",
    "serviceResolver",
    "FormParser"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,IAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,iBAAhB,EAAmC;;AAElCC,QAAM,QAF4B;;AAIlCC,WAAS;;AAER;;AAEAC,aAAU,wCAJF;;AAMRC,WAAQ,sCANA;;AAQRC,UAAO,qCARC;;AAURC,oBAAiB,+CAVT;;AAYR;;AAEA;;;AAGAC,oCAAiC,4BAjBzB;;AAmBR;;;AAGAC,oCAAiC,4BAtBzB;;AAwBR;;;AAGAC,+BAA4B,uBA3BpB;;AA6BR;;;AAGAC,uCAAoC,+BAhC5B;;AAkCR;;;AAGAC,8BAA2B,sBArCnB;;AAuCR;;AAEA;;;AAGAC,wBAAqB,6BA5Cb;;AA8CR;;;AAGAC,2BAAwB,wBAjDhB;;AAmDR;;;AAGAC,qBAAkB,mBAtDV;;AAwDR;;;AAGAC,4BAAyB,yBA3DjB;;AA6DRC,cAAW;;AAEV;;AAEA,4BAAwB;AAJd,IA7DH;;AAoER;;;;;;;;AAQAC,cAAW,mBAASC,UAAT,EAAqBC,YAArB,EAAmC;AAC7CxB,OAAGyB,IAAH,CAAQC,MAAR,CAAeC,YAAf,CAA4BJ,UAA5B;AACA,QAAIK,QAAQC,QAAQC,OAAR,CAAgBT,SAAhB,CAA0BE,UAA1B,CAAZ;AACA,QAAGK,UAAUG,SAAb,EACC,OAAOP,YAAP;AACD,WAAOI,KAAP;AACA,IAlFO;;AAoFR;;;;;;AAMAI,cAAW,mBAAST,UAAT,EAAqBK,KAArB,EAA4B;AACtC5B,OAAGyB,IAAH,CAAQC,MAAR,CAAeC,YAAf,CAA4BJ,UAA5B;AACAM,YAAQC,OAAR,CAAgBT,SAAhB,CAA0BE,UAA1B,IAAwCK,KAAxC;AACA,IA7FO;;AA+FR;;;;;AAKAK,gBAAa,uBAAW;AACvB,WAAOJ,QAAQK,QAAR,CAAiBC,QAAjB,CAA0BC,WAA1B,EAAP;AACA,IAtGO;;AAwGR;;;;;;;;AAQAC,eAAY,oBAASC,WAAT,EAAsBC,QAAtB,EAAgC;AAC3C,QAAIC,WAAWX,QAAQK,QAAR,CAAiBC,QAAjB,CAA0BC,WAA1B,EAAf;AACA,QAAIK,UAAUD,SAASH,UAAT,CAAoBC,WAApB,CAAd;AACA,QAAGG,WAAW,IAAX,IAAmB,CAACF,QAAvB,EAAiC,OAAOE,OAAP;AACjC,UAAM,IAAIC,KAAJ,CAAU,uBAAuBJ,WAAvB,GAAqC,oBAA/C,CAAN;AACA,IArHO;;AAuHR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAK,qBAAkB,0BAASC,SAAT,EAAoBC,eAApB,EAAqC;AACtD,QAAGD,aAAa,IAAhB,EACCA,YAAY,EAAZ;AACD,QAAGC,mBAAmB,IAAtB,EACCA,kBAAkB,yBAASP,WAAT,EAAsB;AAAE,YAAO,IAAP;AAAc,KAAxD;AACD,WAAO,IAAIT,QAAQK,QAAR,CAAiBY,UAArB,CAAgCF,SAAhC,EAA2CC,eAA3C,CAAP;AACA;AA3JO;AAJyB,EAAnC,C;AArBAhB,SAAQC,OAAR,CAAgB3B,aAAhB,GAAgCA,aAAhC",
  "file": "Qookery.js",
  "sourcesContent": [
    "/*\n\tQookery - Declarative UI Building for Qooxdoo\n\n\tCopyright (c) Ergobyte Informatics S.A., www.ergobyte.gr\n\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\n\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n*/\n\n/**\n * Static class providing access to main Qookery features\n */\nqx.Class.define(\"qookery.Qookery\", {\n\n\ttype: \"static\",\n\n\tstatics: {\n\n\t\t// Prefixed attributes - see XSD for their definition\n\n\t\tA_FORMAT: \"{http://www.qookery.org/ns/Form}format\",\n\n\t\tA_ICON: \"{http://www.qookery.org/ns/Form}icon\",\n\n\t\tA_MAP: \"{http://www.qookery.org/ns/Form}map\",\n\n\t\tA_TOOL_TIP_TEXT: \"{http://www.qookery.org/ns/Form}tool-tip-text\",\n\n\t\t// Options\n\n\t\t/**\n\t\t * Default value of <code>spacing-x</code> attribute for layout managers that support it\n\t\t */\n\t\tOPTION_DEFAULT_LAYOUT_SPACING_X: \"q:default-layout-spacing-x\",\n\n\t\t/**\n\t\t * Default value of <code>spacing-y</code> attribute for layout managers that support it\n\t\t */\n\t\tOPTION_DEFAULT_LAYOUT_SPACING_Y: \"q:default-layout-spacing-y\",\n\n\t\t/**\n\t\t * Default value of <code>live-update</code> attribute for components that support it\n\t\t */\n\t\tOPTION_DEFAULT_LIVE_UPDATE: \"q:default-live-update\",\n\n\t\t/**\n\t\t * Default value of <code>native-context-menu</code> attribute for components that support it\n\t\t */\n\t\tOPTION_DEFAULT_NATIVE_CONTEXT_MENU: \"q:default-native-context-menu\",\n\n\t\t/**\n\t\t * {String} Path to directory containing external libraries used by Qookery, defaults to <code>qookery/lib</code>.\n\t\t */\n\t\tOPTION_EXTERNAL_LIBRARIES: \"q:external-libraries\",\n\n\t\t// Services\n\n\t\t/**\n\t\t * Currently running Qooxdoo application\n\t\t */\n\t\tSERVICE_APPLICATION: \"qx.application.IApplication\",\n\n\t\t/**\n\t\t * Default model provider\n\t\t */\n\t\tSERVICE_MODEL_PROVIDER: \"qookery.IModelProvider\",\n\n\t\t/**\n\t\t * Qookery registry\n\t\t */\n\t\tSERVICE_REGISTRY: \"qookery.IRegistry\",\n\n\t\t/**\n\t\t * Currently set resource loader\n\t\t */\n\t\tSERVICE_RESOURCE_LOADER: \"qookery.IResourceLoader\",\n\n\t\t__OPTIONS: {\n\n\t\t\t// Default values\n\n\t\t\t\"q:external-libraries\": \"qookery/lib\"\n\t\t},\n\n\t\t/**\n\t\t * Return an option's value\n\t\t *\n\t\t * @param optionName {String} name of option\n\t\t * @param defaultValue {any} value to return in case option is not set\n\t\t *\n\t\t * @return {any} option value\n\t\t */\n\t\tgetOption: function(optionName, defaultValue) {\n\t\t\tqx.core.Assert.assertString(optionName);\n\t\t\tvar value = qookery.Qookery.__OPTIONS[optionName];\n\t\t\tif(value === undefined)\n\t\t\t\treturn defaultValue;\n\t\t\treturn value;\n\t\t},\n\n\t\t/**\n\t\t * Set an option's value\n\t\t *\n\t\t * @param optionName {String} name of option\n\t\t * @param value {any} new option value\n\t\t */\n\t\tsetOption: function(optionName, value) {\n\t\t\tqx.core.Assert.assertString(optionName);\n\t\t\tqookery.Qookery.__OPTIONS[optionName] = value;\n\t\t},\n\n\t\t/**\n\t\t * Return the Qookery registry\n\t\t *\n\t\t * @return {qookery.IRegistry} the registry\n\t\t */\n\t\tgetRegistry: function() {\n\t\t\treturn qookery.internal.Registry.getInstance();\n\t\t},\n\n\t\t/**\n\t\t * Return a service\n\t\t *\n\t\t * @param serviceName {String} symbolic name of the service\n\t\t * @param required {Boolean} if <code>true</code>, throw an exception when service is not found\n\t\t *\n\t\t * @return {Object} the instance of the required service or <code>null</code> if not available\n\t\t */\n\t\tgetService: function(serviceName, required) {\n\t\t\tvar registry = qookery.internal.Registry.getInstance();\n\t\t\tvar service = registry.getService(serviceName);\n\t\t\tif(service != null || !required) return service;\n\t\t\tthrow new Error(\"Required service '\" + serviceName + \"' is not available\");\n\t\t},\n\n\t\t/**\n\t\t * Create a new Qookery form parser\n\t\t *\n\t\t * <p>You can use the parser for parsing XML documents in order to create a new form\n\t\t * components. Form components may then be displayed at any time by adding their\n\t\t * main widget (currently always a composite) to the children list\n\t\t * of container widgets.</p>\n\t\t *\n\t\t * <p>A demonstration of how to correctly use the form parser is:</p>\n\t\t *\n\t\t * <pre class=\"javascript\">\n\t\t * var parser = qookery.Qookery.createNewParser();\n\t\t * try {\n\t\t *\tvar formComponent = parser.parse(xmlDocument);\n\t\t *\tvar mainWidget = formComponent.getMainWidget();\n\t\t *\tcontainer.add(mainWidget);\n\t\t * }\n\t\t * catch(error) {\n\t\t *\t// Handle the exception\n\t\t * }\n\t\t * finally {\n\t\t *\tparser.dispose();\n\t\t * }\n\t\t * </pre>\n\n\t\t * @param variables {Map ? null} optional variables to pass to generated forms\n\t\t * @param serviceResolver {Function ? null} optional function that will be called when resolving services\n\t\t *\n\t\t * @return {qookery.IFormParser} newly created instance of form parser\n\t\t */\n\t\tcreateFormParser: function(variables, serviceResolver) {\n\t\t\tif(variables == null)\n\t\t\t\tvariables = { };\n\t\t\tif(serviceResolver == null)\n\t\t\t\tserviceResolver = function(serviceName) { return null; };\n\t\t\treturn new qookery.internal.FormParser(variables, serviceResolver);\n\t\t}\n\t}\n});\n"
  ]
}